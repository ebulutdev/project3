{"ast":null,"code":"// YouTube Data API v3 service\nconst YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY || 'YOUR_API_KEY_HERE';\nconst YOUTUBE_API_URL = 'https://www.googleapis.com/youtube/v3';\n\n// YouTube API'den video arama\nexport const searchVideos = async (query, maxResults = 12) => {\n  if (!query || query.trim() === '') {\n    return [];\n  }\n  try {\n    // Önce arama yap\n    const searchResponse = await fetch(`${YOUTUBE_API_URL}/search?part=snippet&q=${encodeURIComponent(query)}&maxResults=${maxResults}&type=video&key=${YOUTUBE_API_KEY}`);\n    if (!searchResponse.ok) {\n      throw new Error(`API Error: ${searchResponse.status}`);\n    }\n    const searchData = await searchResponse.json();\n    if (!searchData.items || searchData.items.length === 0) {\n      return [];\n    }\n\n    // Video ID'lerini topla\n    const videoIds = searchData.items.map(item => item.id.videoId).join(',');\n\n    // Video detaylarını al (süre, görüntülenme sayısı için)\n    const videoResponse = await fetch(`${YOUTUBE_API_URL}/videos?part=contentDetails,statistics&id=${videoIds}&key=${YOUTUBE_API_KEY}`);\n    if (!videoResponse.ok) {\n      throw new Error(`API Error: ${videoResponse.status}`);\n    }\n    const videoData = await videoResponse.json();\n\n    // Verileri birleştir\n    const videos = searchData.items.map((searchItem, index) => {\n      var _searchItem$snippet$t, _searchItem$snippet$t2, _videoItem$contentDet, _videoItem$statistics;\n      const videoItem = videoData.items[index];\n      return {\n        id: searchItem.id.videoId,\n        title: searchItem.snippet.title,\n        description: searchItem.snippet.description,\n        thumbnail: ((_searchItem$snippet$t = searchItem.snippet.thumbnails.high) === null || _searchItem$snippet$t === void 0 ? void 0 : _searchItem$snippet$t.url) || ((_searchItem$snippet$t2 = searchItem.snippet.thumbnails.medium) === null || _searchItem$snippet$t2 === void 0 ? void 0 : _searchItem$snippet$t2.url),\n        duration: parseDuration((videoItem === null || videoItem === void 0 ? void 0 : (_videoItem$contentDet = videoItem.contentDetails) === null || _videoItem$contentDet === void 0 ? void 0 : _videoItem$contentDet.duration) || 'PT0S'),\n        views: parseInt((videoItem === null || videoItem === void 0 ? void 0 : (_videoItem$statistics = videoItem.statistics) === null || _videoItem$statistics === void 0 ? void 0 : _videoItem$statistics.viewCount) || '0'),\n        publishedAt: searchItem.snippet.publishedAt,\n        channel: {\n          name: searchItem.snippet.channelTitle,\n          avatar: `https://yt3.ggpht.com/ytc/${searchItem.snippet.channelId}=s88-c-k-c0x00ffffff-no-rj`\n        },\n        url: `https://www.youtube.com/watch?v=${searchItem.id.videoId}`\n      };\n    });\n    return videos;\n  } catch (error) {\n    console.error('YouTube API Error:', error);\n    throw new Error('Video arama sırasında bir hata oluştu. Lütfen tekrar deneyin.');\n  }\n};\n\n// YouTube duration formatını saniyeye çevir (PT4M13S -> 253)\nconst parseDuration = duration => {\n  const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n  if (!match) return 0;\n  const hours = parseInt(match[1] || '0');\n  const minutes = parseInt(match[2] || '0');\n  const seconds = parseInt(match[3] || '0');\n  return hours * 3600 + minutes * 60 + seconds;\n};\n\n// Popüler videoları getir\nexport const getPopularVideos = async (maxResults = 12) => {\n  try {\n    const response = await fetch(`${YOUTUBE_API_URL}/videos?part=snippet,contentDetails,statistics&chart=mostPopular&regionCode=TR&maxResults=${maxResults}&key=${YOUTUBE_API_KEY}`);\n    if (!response.ok) {\n      throw new Error(`API Error: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data.items || data.items.length === 0) {\n      return [];\n    }\n    const videos = data.items.map(item => {\n      var _item$snippet$thumbna, _item$snippet$thumbna2;\n      return {\n        id: item.id,\n        title: item.snippet.title,\n        description: item.snippet.description,\n        thumbnail: ((_item$snippet$thumbna = item.snippet.thumbnails.high) === null || _item$snippet$thumbna === void 0 ? void 0 : _item$snippet$thumbna.url) || ((_item$snippet$thumbna2 = item.snippet.thumbnails.medium) === null || _item$snippet$thumbna2 === void 0 ? void 0 : _item$snippet$thumbna2.url),\n        duration: parseDuration(item.contentDetails.duration),\n        views: parseInt(item.statistics.viewCount || '0'),\n        publishedAt: item.snippet.publishedAt,\n        channel: {\n          name: item.snippet.channelTitle,\n          avatar: `https://yt3.ggpht.com/ytc/${item.snippet.channelId}=s88-c-k-c0x00ffffff-no-rj`\n        },\n        url: `https://www.youtube.com/watch?v=${item.id}`\n      };\n    });\n    return videos;\n  } catch (error) {\n    console.error('YouTube API Error:', error);\n    throw new Error('Popüler videolar yüklenirken bir hata oluştu.');\n  }\n};","map":{"version":3,"names":["YOUTUBE_API_KEY","process","env","REACT_APP_YOUTUBE_API_KEY","YOUTUBE_API_URL","searchVideos","query","maxResults","trim","searchResponse","fetch","encodeURIComponent","ok","Error","status","searchData","json","items","length","videoIds","map","item","id","videoId","join","videoResponse","videoData","videos","searchItem","index","_searchItem$snippet$t","_searchItem$snippet$t2","_videoItem$contentDet","_videoItem$statistics","videoItem","title","snippet","description","thumbnail","thumbnails","high","url","medium","duration","parseDuration","contentDetails","views","parseInt","statistics","viewCount","publishedAt","channel","name","channelTitle","avatar","channelId","error","console","match","hours","minutes","seconds","getPopularVideos","response","data","_item$snippet$thumbna","_item$snippet$thumbna2"],"sources":["C:/Users/pc/OneDrive/Desktop/dersk/src/services/youtubeApi.js"],"sourcesContent":["// YouTube Data API v3 service\r\nconst YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY || 'YOUR_API_KEY_HERE';\r\nconst YOUTUBE_API_URL = 'https://www.googleapis.com/youtube/v3';\r\n\r\n// YouTube API'den video arama\r\nexport const searchVideos = async (query, maxResults = 12) => {\r\n  if (!query || query.trim() === '') {\r\n    return [];\r\n  }\r\n\r\n  try {\r\n    // Önce arama yap\r\n    const searchResponse = await fetch(\r\n      `${YOUTUBE_API_URL}/search?part=snippet&q=${encodeURIComponent(query)}&maxResults=${maxResults}&type=video&key=${YOUTUBE_API_KEY}`\r\n    );\r\n\r\n    if (!searchResponse.ok) {\r\n      throw new Error(`API Error: ${searchResponse.status}`);\r\n    }\r\n\r\n    const searchData = await searchResponse.json();\r\n\r\n    if (!searchData.items || searchData.items.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    // Video ID'lerini topla\r\n    const videoIds = searchData.items.map(item => item.id.videoId).join(',');\r\n\r\n    // Video detaylarını al (süre, görüntülenme sayısı için)\r\n    const videoResponse = await fetch(\r\n      `${YOUTUBE_API_URL}/videos?part=contentDetails,statistics&id=${videoIds}&key=${YOUTUBE_API_KEY}`\r\n    );\r\n\r\n    if (!videoResponse.ok) {\r\n      throw new Error(`API Error: ${videoResponse.status}`);\r\n    }\r\n\r\n    const videoData = await videoResponse.json();\r\n\r\n    // Verileri birleştir\r\n    const videos = searchData.items.map((searchItem, index) => {\r\n      const videoItem = videoData.items[index];\r\n      \r\n      return {\r\n        id: searchItem.id.videoId,\r\n        title: searchItem.snippet.title,\r\n        description: searchItem.snippet.description,\r\n        thumbnail: searchItem.snippet.thumbnails.high?.url || searchItem.snippet.thumbnails.medium?.url,\r\n        duration: parseDuration(videoItem?.contentDetails?.duration || 'PT0S'),\r\n        views: parseInt(videoItem?.statistics?.viewCount || '0'),\r\n        publishedAt: searchItem.snippet.publishedAt,\r\n        channel: {\r\n          name: searchItem.snippet.channelTitle,\r\n          avatar: `https://yt3.ggpht.com/ytc/${searchItem.snippet.channelId}=s88-c-k-c0x00ffffff-no-rj`\r\n        },\r\n        url: `https://www.youtube.com/watch?v=${searchItem.id.videoId}`\r\n      };\r\n    });\r\n\r\n    return videos;\r\n  } catch (error) {\r\n    console.error('YouTube API Error:', error);\r\n    throw new Error('Video arama sırasında bir hata oluştu. Lütfen tekrar deneyin.');\r\n  }\r\n};\r\n\r\n// YouTube duration formatını saniyeye çevir (PT4M13S -> 253)\r\nconst parseDuration = (duration) => {\r\n  const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\r\n  if (!match) return 0;\r\n  \r\n  const hours = parseInt(match[1] || '0');\r\n  const minutes = parseInt(match[2] || '0');\r\n  const seconds = parseInt(match[3] || '0');\r\n  \r\n  return hours * 3600 + minutes * 60 + seconds;\r\n};\r\n\r\n// Popüler videoları getir\r\nexport const getPopularVideos = async (maxResults = 12) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${YOUTUBE_API_URL}/videos?part=snippet,contentDetails,statistics&chart=mostPopular&regionCode=TR&maxResults=${maxResults}&key=${YOUTUBE_API_KEY}`\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`API Error: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    if (!data.items || data.items.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const videos = data.items.map(item => ({\r\n      id: item.id,\r\n      title: item.snippet.title,\r\n      description: item.snippet.description,\r\n      thumbnail: item.snippet.thumbnails.high?.url || item.snippet.thumbnails.medium?.url,\r\n      duration: parseDuration(item.contentDetails.duration),\r\n      views: parseInt(item.statistics.viewCount || '0'),\r\n      publishedAt: item.snippet.publishedAt,\r\n      channel: {\r\n        name: item.snippet.channelTitle,\r\n        avatar: `https://yt3.ggpht.com/ytc/${item.snippet.channelId}=s88-c-k-c0x00ffffff-no-rj`\r\n      },\r\n      url: `https://www.youtube.com/watch?v=${item.id}`\r\n    }));\r\n\r\n    return videos;\r\n  } catch (error) {\r\n    console.error('YouTube API Error:', error);\r\n    throw new Error('Popüler videolar yüklenirken bir hata oluştu.');\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}