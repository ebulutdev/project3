{"ast":null,"code":"// YouTube Data API v3 service\nconst YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY || 'AIzaSyAYB5huJVay-0Up_EIatDa1HFJdTLcMM_A';\nconst YOUTUBE_API_URL = 'https://www.googleapis.com/youtube/v3';\n\n// YouTube API'den video arama\nexport const searchVideos = async (query, maxResults = 12) => {\n  if (!query || query.trim() === '') {\n    return [];\n  }\n  try {\n    // Önce arama yap\n    const searchResponse = await fetch(`${YOUTUBE_API_URL}/search?part=snippet&q=${encodeURIComponent(query)}&maxResults=${maxResults}&type=video&key=${YOUTUBE_API_KEY}`);\n    if (!searchResponse.ok) {\n      throw new Error(`API Error: ${searchResponse.status}`);\n    }\n    const searchData = await searchResponse.json();\n    if (!searchData.items || searchData.items.length === 0) {\n      return [];\n    }\n\n    // Video ID'lerini topla\n    const videoIds = searchData.items.map(item => item.id.videoId).join(',');\n\n    // Video detaylarını al (süre, görüntülenme sayısı için)\n    const videoResponse = await fetch(`${YOUTUBE_API_URL}/videos?part=contentDetails,statistics&id=${videoIds}&key=${YOUTUBE_API_KEY}`);\n    if (!videoResponse.ok) {\n      throw new Error(`API Error: ${videoResponse.status}`);\n    }\n    const videoData = await videoResponse.json();\n\n    // Verileri birleştir\n    const videos = searchData.items.map((searchItem, index) => {\n      var _videoItem$statistics, _videoItem$statistics2, _videoItem$statistics3, _videoItem$statistics4, _videoItem$contentDet, _searchItem$snippet$t, _searchItem$snippet$t2, _videoItem$contentDet2;\n      const videoItem = videoData.items[index];\n      const views = parseInt((videoItem === null || videoItem === void 0 ? void 0 : (_videoItem$statistics = videoItem.statistics) === null || _videoItem$statistics === void 0 ? void 0 : _videoItem$statistics.viewCount) || '0');\n      const likes = parseInt((videoItem === null || videoItem === void 0 ? void 0 : (_videoItem$statistics2 = videoItem.statistics) === null || _videoItem$statistics2 === void 0 ? void 0 : _videoItem$statistics2.likeCount) || '0');\n      const dislikes = parseInt((videoItem === null || videoItem === void 0 ? void 0 : (_videoItem$statistics3 = videoItem.statistics) === null || _videoItem$statistics3 === void 0 ? void 0 : _videoItem$statistics3.dislikeCount) || '0');\n      const comments = parseInt((videoItem === null || videoItem === void 0 ? void 0 : (_videoItem$statistics4 = videoItem.statistics) === null || _videoItem$statistics4 === void 0 ? void 0 : _videoItem$statistics4.commentCount) || '0');\n\n      // Kalite skoru hesapla\n      const qualityScore = calculateQualityScore({\n        views,\n        likes,\n        dislikes,\n        comments,\n        publishedAt: searchItem.snippet.publishedAt,\n        duration: parseDuration((videoItem === null || videoItem === void 0 ? void 0 : (_videoItem$contentDet = videoItem.contentDetails) === null || _videoItem$contentDet === void 0 ? void 0 : _videoItem$contentDet.duration) || 'PT0S')\n      });\n      return {\n        id: searchItem.id.videoId,\n        title: searchItem.snippet.title,\n        description: searchItem.snippet.description,\n        thumbnail: ((_searchItem$snippet$t = searchItem.snippet.thumbnails.high) === null || _searchItem$snippet$t === void 0 ? void 0 : _searchItem$snippet$t.url) || ((_searchItem$snippet$t2 = searchItem.snippet.thumbnails.medium) === null || _searchItem$snippet$t2 === void 0 ? void 0 : _searchItem$snippet$t2.url),\n        duration: parseDuration((videoItem === null || videoItem === void 0 ? void 0 : (_videoItem$contentDet2 = videoItem.contentDetails) === null || _videoItem$contentDet2 === void 0 ? void 0 : _videoItem$contentDet2.duration) || 'PT0S'),\n        views,\n        likes,\n        dislikes,\n        comments,\n        publishedAt: searchItem.snippet.publishedAt,\n        channel: {\n          name: searchItem.snippet.channelTitle,\n          avatar: `https://yt3.ggpht.com/ytc/${searchItem.snippet.channelId}=s88-c-k-c0x00ffffff-no-rj`\n        },\n        url: `https://www.youtube.com/watch?v=${searchItem.id.videoId}`,\n        qualityScore,\n        engagementRate: calculateEngagementRate(views, likes, comments)\n      };\n    });\n\n    // Kalite skoruna göre sırala (yüksek skor önce)\n    return videos.sort((a, b) => b.qualityScore - a.qualityScore);\n  } catch (error) {\n    console.error('YouTube API Error:', error);\n    throw new Error('Video arama sırasında bir hata oluştu. Lütfen tekrar deneyin.');\n  }\n};\n\n// YouTube duration formatını saniyeye çevir (PT4M13S -> 253)\nconst parseDuration = duration => {\n  const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n  if (!match) return 0;\n  const hours = parseInt(match[1] || '0');\n  const minutes = parseInt(match[2] || '0');\n  const seconds = parseInt(match[3] || '0');\n  return hours * 3600 + minutes * 60 + seconds;\n};\n\n// Kalite skoru hesaplama\nconst calculateQualityScore = ({\n  views,\n  likes,\n  dislikes,\n  comments,\n  publishedAt,\n  duration\n}) => {\n  let score = 0;\n\n  // Görüntülenme skoru (logaritmik ölçek)\n  if (views > 0) {\n    score += Math.log10(views) * 10;\n  }\n\n  // Beğeni oranı skoru\n  const totalReactions = likes + dislikes;\n  if (totalReactions > 0) {\n    const likeRatio = likes / totalReactions;\n    score += likeRatio * 50; // %0-50 arası skor\n  }\n\n  // Etkileşim skoru (yorum/izlenme oranı)\n  if (views > 0) {\n    const commentRatio = comments / views;\n    score += Math.min(commentRatio * 1000, 30); // Maksimum 30 puan\n  }\n\n  // Tarih skoru (yeni videolar daha yüksek skor)\n  const publishedDate = new Date(publishedAt);\n  const now = new Date();\n  const daysSincePublished = (now - publishedDate) / (1000 * 60 * 60 * 24);\n  if (daysSincePublished < 30) {\n    score += 20; // Son 30 gün\n  } else if (daysSincePublished < 90) {\n    score += 15; // Son 3 ay\n  } else if (daysSincePublished < 365) {\n    score += 10; // Son 1 yıl\n  } else {\n    score += 5; // Eski videolar\n  }\n\n  // Süre skoru (optimal süre 10-45 dakika)\n  const durationMinutes = duration / 60;\n  if (durationMinutes >= 10 && durationMinutes <= 45) {\n    score += 15; // Optimal süre\n  } else if (durationMinutes >= 5 && durationMinutes <= 60) {\n    score += 10; // Kabul edilebilir süre\n  } else {\n    score += 5; // Çok kısa veya çok uzun\n  }\n  return Math.round(score * 100) / 100; // 2 ondalık basamak\n};\n\n// Etkileşim oranı hesaplama\nconst calculateEngagementRate = (views, likes, comments) => {\n  if (views === 0) return 0;\n  const totalEngagement = likes + comments;\n  return Math.round(totalEngagement / views * 10000) / 100; // % olarak\n};\n\n// Popüler videoları getir\nexport const getPopularVideos = async (maxResults = 12) => {\n  try {\n    const response = await fetch(`${YOUTUBE_API_URL}/videos?part=snippet,contentDetails,statistics&chart=mostPopular&regionCode=TR&maxResults=${maxResults}&key=${YOUTUBE_API_KEY}`);\n    if (!response.ok) {\n      throw new Error(`API Error: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data.items || data.items.length === 0) {\n      return [];\n    }\n    const videos = data.items.map(item => {\n      var _item$snippet$thumbna, _item$snippet$thumbna2;\n      return {\n        id: item.id,\n        title: item.snippet.title,\n        description: item.snippet.description,\n        thumbnail: ((_item$snippet$thumbna = item.snippet.thumbnails.high) === null || _item$snippet$thumbna === void 0 ? void 0 : _item$snippet$thumbna.url) || ((_item$snippet$thumbna2 = item.snippet.thumbnails.medium) === null || _item$snippet$thumbna2 === void 0 ? void 0 : _item$snippet$thumbna2.url),\n        duration: parseDuration(item.contentDetails.duration),\n        views: parseInt(item.statistics.viewCount || '0'),\n        publishedAt: item.snippet.publishedAt,\n        channel: {\n          name: item.snippet.channelTitle,\n          avatar: `https://yt3.ggpht.com/ytc/${item.snippet.channelId}=s88-c-k-c0x00ffffff-no-rj`\n        },\n        url: `https://www.youtube.com/watch?v=${item.id}`\n      };\n    });\n    return videos;\n  } catch (error) {\n    console.error('YouTube API Error:', error);\n    throw new Error('Popüler videolar yüklenirken bir hata oluştu.');\n  }\n};","map":{"version":3,"names":["YOUTUBE_API_KEY","process","env","REACT_APP_YOUTUBE_API_KEY","YOUTUBE_API_URL","searchVideos","query","maxResults","trim","searchResponse","fetch","encodeURIComponent","ok","Error","status","searchData","json","items","length","videoIds","map","item","id","videoId","join","videoResponse","videoData","videos","searchItem","index","_videoItem$statistics","_videoItem$statistics2","_videoItem$statistics3","_videoItem$statistics4","_videoItem$contentDet","_searchItem$snippet$t","_searchItem$snippet$t2","_videoItem$contentDet2","videoItem","views","parseInt","statistics","viewCount","likes","likeCount","dislikes","dislikeCount","comments","commentCount","qualityScore","calculateQualityScore","publishedAt","snippet","duration","parseDuration","contentDetails","title","description","thumbnail","thumbnails","high","url","medium","channel","name","channelTitle","avatar","channelId","engagementRate","calculateEngagementRate","sort","a","b","error","console","match","hours","minutes","seconds","score","Math","log10","totalReactions","likeRatio","commentRatio","min","publishedDate","Date","now","daysSincePublished","durationMinutes","round","totalEngagement","getPopularVideos","response","data","_item$snippet$thumbna","_item$snippet$thumbna2"],"sources":["C:/Users/pc/OneDrive/Desktop/dersk/src/services/youtubeApi.js"],"sourcesContent":["// YouTube Data API v3 service\r\nconst YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY || 'AIzaSyAYB5huJVay-0Up_EIatDa1HFJdTLcMM_A';\r\nconst YOUTUBE_API_URL = 'https://www.googleapis.com/youtube/v3';\r\n\r\n// YouTube API'den video arama\r\nexport const searchVideos = async (query, maxResults = 12) => {\r\n  if (!query || query.trim() === '') {\r\n    return [];\r\n  }\r\n\r\n  try {\r\n    // Önce arama yap\r\n    const searchResponse = await fetch(\r\n      `${YOUTUBE_API_URL}/search?part=snippet&q=${encodeURIComponent(query)}&maxResults=${maxResults}&type=video&key=${YOUTUBE_API_KEY}`\r\n    );\r\n\r\n    if (!searchResponse.ok) {\r\n      throw new Error(`API Error: ${searchResponse.status}`);\r\n    }\r\n\r\n    const searchData = await searchResponse.json();\r\n\r\n    if (!searchData.items || searchData.items.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    // Video ID'lerini topla\r\n    const videoIds = searchData.items.map(item => item.id.videoId).join(',');\r\n\r\n    // Video detaylarını al (süre, görüntülenme sayısı için)\r\n    const videoResponse = await fetch(\r\n      `${YOUTUBE_API_URL}/videos?part=contentDetails,statistics&id=${videoIds}&key=${YOUTUBE_API_KEY}`\r\n    );\r\n\r\n    if (!videoResponse.ok) {\r\n      throw new Error(`API Error: ${videoResponse.status}`);\r\n    }\r\n\r\n    const videoData = await videoResponse.json();\r\n\r\n    // Verileri birleştir\r\n    const videos = searchData.items.map((searchItem, index) => {\r\n      const videoItem = videoData.items[index];\r\n      \r\n      const views = parseInt(videoItem?.statistics?.viewCount || '0');\r\n      const likes = parseInt(videoItem?.statistics?.likeCount || '0');\r\n      const dislikes = parseInt(videoItem?.statistics?.dislikeCount || '0');\r\n      const comments = parseInt(videoItem?.statistics?.commentCount || '0');\r\n      \r\n      // Kalite skoru hesapla\r\n      const qualityScore = calculateQualityScore({\r\n        views,\r\n        likes,\r\n        dislikes,\r\n        comments,\r\n        publishedAt: searchItem.snippet.publishedAt,\r\n        duration: parseDuration(videoItem?.contentDetails?.duration || 'PT0S')\r\n      });\r\n      \r\n      return {\r\n        id: searchItem.id.videoId,\r\n        title: searchItem.snippet.title,\r\n        description: searchItem.snippet.description,\r\n        thumbnail: searchItem.snippet.thumbnails.high?.url || searchItem.snippet.thumbnails.medium?.url,\r\n        duration: parseDuration(videoItem?.contentDetails?.duration || 'PT0S'),\r\n        views,\r\n        likes,\r\n        dislikes,\r\n        comments,\r\n        publishedAt: searchItem.snippet.publishedAt,\r\n        channel: {\r\n          name: searchItem.snippet.channelTitle,\r\n          avatar: `https://yt3.ggpht.com/ytc/${searchItem.snippet.channelId}=s88-c-k-c0x00ffffff-no-rj`\r\n        },\r\n        url: `https://www.youtube.com/watch?v=${searchItem.id.videoId}`,\r\n        qualityScore,\r\n        engagementRate: calculateEngagementRate(views, likes, comments)\r\n      };\r\n    });\r\n\r\n    // Kalite skoruna göre sırala (yüksek skor önce)\r\n    return videos.sort((a, b) => b.qualityScore - a.qualityScore);\r\n  } catch (error) {\r\n    console.error('YouTube API Error:', error);\r\n    throw new Error('Video arama sırasında bir hata oluştu. Lütfen tekrar deneyin.');\r\n  }\r\n};\r\n\r\n// YouTube duration formatını saniyeye çevir (PT4M13S -> 253)\r\nconst parseDuration = (duration) => {\r\n  const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\r\n  if (!match) return 0;\r\n  \r\n  const hours = parseInt(match[1] || '0');\r\n  const minutes = parseInt(match[2] || '0');\r\n  const seconds = parseInt(match[3] || '0');\r\n  \r\n  return hours * 3600 + minutes * 60 + seconds;\r\n};\r\n\r\n// Kalite skoru hesaplama\r\nconst calculateQualityScore = ({ views, likes, dislikes, comments, publishedAt, duration }) => {\r\n  let score = 0;\r\n  \r\n  // Görüntülenme skoru (logaritmik ölçek)\r\n  if (views > 0) {\r\n    score += Math.log10(views) * 10;\r\n  }\r\n  \r\n  // Beğeni oranı skoru\r\n  const totalReactions = likes + dislikes;\r\n  if (totalReactions > 0) {\r\n    const likeRatio = likes / totalReactions;\r\n    score += likeRatio * 50; // %0-50 arası skor\r\n  }\r\n  \r\n  // Etkileşim skoru (yorum/izlenme oranı)\r\n  if (views > 0) {\r\n    const commentRatio = comments / views;\r\n    score += Math.min(commentRatio * 1000, 30); // Maksimum 30 puan\r\n  }\r\n  \r\n  // Tarih skoru (yeni videolar daha yüksek skor)\r\n  const publishedDate = new Date(publishedAt);\r\n  const now = new Date();\r\n  const daysSincePublished = (now - publishedDate) / (1000 * 60 * 60 * 24);\r\n  \r\n  if (daysSincePublished < 30) {\r\n    score += 20; // Son 30 gün\r\n  } else if (daysSincePublished < 90) {\r\n    score += 15; // Son 3 ay\r\n  } else if (daysSincePublished < 365) {\r\n    score += 10; // Son 1 yıl\r\n  } else {\r\n    score += 5; // Eski videolar\r\n  }\r\n  \r\n  // Süre skoru (optimal süre 10-45 dakika)\r\n  const durationMinutes = duration / 60;\r\n  if (durationMinutes >= 10 && durationMinutes <= 45) {\r\n    score += 15; // Optimal süre\r\n  } else if (durationMinutes >= 5 && durationMinutes <= 60) {\r\n    score += 10; // Kabul edilebilir süre\r\n  } else {\r\n    score += 5; // Çok kısa veya çok uzun\r\n  }\r\n  \r\n  return Math.round(score * 100) / 100; // 2 ondalık basamak\r\n};\r\n\r\n// Etkileşim oranı hesaplama\r\nconst calculateEngagementRate = (views, likes, comments) => {\r\n  if (views === 0) return 0;\r\n  const totalEngagement = likes + comments;\r\n  return Math.round((totalEngagement / views) * 10000) / 100; // % olarak\r\n};\r\n\r\n// Popüler videoları getir\r\nexport const getPopularVideos = async (maxResults = 12) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${YOUTUBE_API_URL}/videos?part=snippet,contentDetails,statistics&chart=mostPopular&regionCode=TR&maxResults=${maxResults}&key=${YOUTUBE_API_KEY}`\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`API Error: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    if (!data.items || data.items.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const videos = data.items.map(item => ({\r\n      id: item.id,\r\n      title: item.snippet.title,\r\n      description: item.snippet.description,\r\n      thumbnail: item.snippet.thumbnails.high?.url || item.snippet.thumbnails.medium?.url,\r\n      duration: parseDuration(item.contentDetails.duration),\r\n      views: parseInt(item.statistics.viewCount || '0'),\r\n      publishedAt: item.snippet.publishedAt,\r\n      channel: {\r\n        name: item.snippet.channelTitle,\r\n        avatar: `https://yt3.ggpht.com/ytc/${item.snippet.channelId}=s88-c-k-c0x00ffffff-no-rj`\r\n      },\r\n      url: `https://www.youtube.com/watch?v=${item.id}`\r\n    }));\r\n\r\n    return videos;\r\n  } catch (error) {\r\n    console.error('YouTube API Error:', error);\r\n    throw new Error('Popüler videolar yüklenirken bir hata oluştu.');\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}