{"ast":null,"code":"// Paket satın alma ve yönetim servisi\nclass PackageService {\n  constructor() {\n    this.purchasedPackages = this.loadPurchasedPackages();\n  }\n\n  // Satın alınan paketleri localStorage'dan yükle\n  loadPurchasedPackages() {\n    try {\n      const stored = localStorage.getItem('purchasedPackages');\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Paket verileri yüklenirken hata:', error);\n      return [];\n    }\n  }\n\n  // Satın alınan paketleri localStorage'a kaydet\n  savePurchasedPackages() {\n    try {\n      localStorage.setItem('purchasedPackages', JSON.stringify(this.purchasedPackages));\n    } catch (error) {\n      console.error('Paket verileri kaydedilirken hata:', error);\n    }\n  }\n\n  // Paket satın al\n  purchasePackage(packageId) {\n    const packageData = {\n      id: packageId,\n      purchaseDate: new Date().toISOString(),\n      status: 'active'\n    };\n\n    // Eğer paket zaten satın alınmışsa güncelle\n    const existingIndex = this.purchasedPackages.findIndex(pkg => pkg.id === packageId);\n    if (existingIndex >= 0) {\n      this.purchasedPackages[existingIndex] = packageData;\n    } else {\n      this.purchasedPackages.push(packageData);\n    }\n    this.savePurchasedPackages();\n    return true;\n  }\n\n  // Paket satın alınmış mı kontrol et\n  isPackagePurchased(packageId) {\n    return this.purchasedPackages.some(pkg => pkg.id === packageId && pkg.status === 'active');\n  }\n\n  // Satın alınan paketleri getir\n  getPurchasedPackages() {\n    return this.purchasedPackages.filter(pkg => pkg.status === 'active');\n  }\n\n  // TYT + AYT Sayısal paketi satın alınmış mı\n  isTYTAYTSayisalPurchased() {\n    return this.isPackagePurchased(1); // ID 1 = TYT Tüm Dersler + AYT Sayısal\n  }\n}\nexport const packageService = new PackageService();","map":{"version":3,"names":["PackageService","constructor","purchasedPackages","loadPurchasedPackages","stored","localStorage","getItem","JSON","parse","error","console","savePurchasedPackages","setItem","stringify","purchasePackage","packageId","packageData","id","purchaseDate","Date","toISOString","status","existingIndex","findIndex","pkg","push","isPackagePurchased","some","getPurchasedPackages","filter","isTYTAYTSayisalPurchased","packageService"],"sources":["C:/Users/pc/OneDrive/Desktop/dersk/src/services/packageService.js"],"sourcesContent":["// Paket satın alma ve yönetim servisi\r\nclass PackageService {\r\n  constructor() {\r\n    this.purchasedPackages = this.loadPurchasedPackages();\r\n  }\r\n\r\n  // Satın alınan paketleri localStorage'dan yükle\r\n  loadPurchasedPackages() {\r\n    try {\r\n      const stored = localStorage.getItem('purchasedPackages');\r\n      return stored ? JSON.parse(stored) : [];\r\n    } catch (error) {\r\n      console.error('Paket verileri yüklenirken hata:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Satın alınan paketleri localStorage'a kaydet\r\n  savePurchasedPackages() {\r\n    try {\r\n      localStorage.setItem('purchasedPackages', JSON.stringify(this.purchasedPackages));\r\n    } catch (error) {\r\n      console.error('Paket verileri kaydedilirken hata:', error);\r\n    }\r\n  }\r\n\r\n  // Paket satın al\r\n  purchasePackage(packageId) {\r\n    const packageData = {\r\n      id: packageId,\r\n      purchaseDate: new Date().toISOString(),\r\n      status: 'active'\r\n    };\r\n\r\n    // Eğer paket zaten satın alınmışsa güncelle\r\n    const existingIndex = this.purchasedPackages.findIndex(pkg => pkg.id === packageId);\r\n    if (existingIndex >= 0) {\r\n      this.purchasedPackages[existingIndex] = packageData;\r\n    } else {\r\n      this.purchasedPackages.push(packageData);\r\n    }\r\n\r\n    this.savePurchasedPackages();\r\n    return true;\r\n  }\r\n\r\n  // Paket satın alınmış mı kontrol et\r\n  isPackagePurchased(packageId) {\r\n    return this.purchasedPackages.some(pkg => pkg.id === packageId && pkg.status === 'active');\r\n  }\r\n\r\n  // Satın alınan paketleri getir\r\n  getPurchasedPackages() {\r\n    return this.purchasedPackages.filter(pkg => pkg.status === 'active');\r\n  }\r\n\r\n  // TYT + AYT Sayısal paketi satın alınmış mı\r\n  isTYTAYTSayisalPurchased() {\r\n    return this.isPackagePurchased(1); // ID 1 = TYT Tüm Dersler + AYT Sayısal\r\n  }\r\n}\r\n\r\nexport const packageService = new PackageService();\r\n"],"mappings":"AAAA;AACA,MAAMA,cAAc,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACC,qBAAqB,CAAC,CAAC;EACvD;;EAEA;EACAA,qBAAqBA,CAAA,EAAG;IACtB,IAAI;MACF,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC;MACxD,OAAOF,MAAM,GAAGG,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,GAAG,EAAE;IACzC,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,OAAO,EAAE;IACX;EACF;;EAEA;EACAE,qBAAqBA,CAAA,EAAG;IACtB,IAAI;MACFN,YAAY,CAACO,OAAO,CAAC,mBAAmB,EAAEL,IAAI,CAACM,SAAS,CAAC,IAAI,CAACX,iBAAiB,CAAC,CAAC;IACnF,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D;EACF;;EAEA;EACAK,eAAeA,CAACC,SAAS,EAAE;IACzB,MAAMC,WAAW,GAAG;MAClBC,EAAE,EAAEF,SAAS;MACbG,YAAY,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACtCC,MAAM,EAAE;IACV,CAAC;;IAED;IACA,MAAMC,aAAa,GAAG,IAAI,CAACpB,iBAAiB,CAACqB,SAAS,CAACC,GAAG,IAAIA,GAAG,CAACP,EAAE,KAAKF,SAAS,CAAC;IACnF,IAAIO,aAAa,IAAI,CAAC,EAAE;MACtB,IAAI,CAACpB,iBAAiB,CAACoB,aAAa,CAAC,GAAGN,WAAW;IACrD,CAAC,MAAM;MACL,IAAI,CAACd,iBAAiB,CAACuB,IAAI,CAACT,WAAW,CAAC;IAC1C;IAEA,IAAI,CAACL,qBAAqB,CAAC,CAAC;IAC5B,OAAO,IAAI;EACb;;EAEA;EACAe,kBAAkBA,CAACX,SAAS,EAAE;IAC5B,OAAO,IAAI,CAACb,iBAAiB,CAACyB,IAAI,CAACH,GAAG,IAAIA,GAAG,CAACP,EAAE,KAAKF,SAAS,IAAIS,GAAG,CAACH,MAAM,KAAK,QAAQ,CAAC;EAC5F;;EAEA;EACAO,oBAAoBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAAC1B,iBAAiB,CAAC2B,MAAM,CAACL,GAAG,IAAIA,GAAG,CAACH,MAAM,KAAK,QAAQ,CAAC;EACtE;;EAEA;EACAS,wBAAwBA,CAAA,EAAG;IACzB,OAAO,IAAI,CAACJ,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;EACrC;AACF;AAEA,OAAO,MAAMK,cAAc,GAAG,IAAI/B,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}